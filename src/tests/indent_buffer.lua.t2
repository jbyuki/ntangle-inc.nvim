;;; ../ntangle-inc
;; set indent expr for buffer
vim.bo[ev.buf].indentexpr = "v:lua.require'ntangle-inc'.indentexpr()"

;; implement
function M.indentexpr()
	local line = vim.v.lnum-1

	; get mirror buffer and corrected line for indent
	; get indent using nvim treesitter
end

;; get mirror buffer and corrected line for indent
local buf = vim.api.nvim_get_current_buf()
local ll = M.lls[buf]
if not ll then
	return -1
end
local hl = M.ll_to_hl[ll]

if not hl then
	return -1
end

local nt_infos = M.TtoNT(buf, line)
local root_section
local line
local root_section
local bufnr
local prefix
for _, nt_info in ipairs(nt_infos) do
	root_section = nt_info[2]
	line = nt_info[3]
	prefix = nt_info[4]
  bufnr = M.root_to_mirror_buf[root_section]
	break
end

if #nt_infos == 0 or not bufnr then
	return -1
end

;; get indent using nvim treesitter
local found, mod  = pcall(require, "nvim-treesitter.indent")
if found then
	return vim.api.nvim_buf_call(bufnr, function()
		local indent = mod.get_indent(line+1) 
		if indent >= 0 then
			local num_spaces = 0
			; convert tab to spaces
			return math.max(indent-num_spaces, 0)
		end
		return indent
	end)
end

;; silently set filetype for buffer
if ft then
	vim.o.eventignore = "all"
	vim.bo[buf].ft = ft
	vim.o.eventignore = ""
end

;; convert tab to spaces
if #prefix > 0 then
	if prefix:sub(1,1) == "\t" then
		num_spaces = #prefix * vim.o.ts
	else
		num_spaces = #prefix
	end
end
